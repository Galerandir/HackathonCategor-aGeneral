// ****************************************************************************
//
//	Forecast paramater generation
//
// ****************************************************************************
//
//	PROJECT	: HackTour
// 	DOMAIN  : -
//	MODULE  : Generation
//	PACKAGE	: -
// 	FOLDER  : -
// 	FILE	: ForecastGeneration.lkt
//
// ****************************************************************************

(ScriboScheme GenerateSuggestions: [ DialogueAct ]
	ScriboCapture
	{
		&IsExplicit('parameter') && hasParType (&LOCPars(1), 'next_venue' )
	}
	ScriboAction
	{
		Parameter parameter <- getParByType ( &LOCPars(1), 'next_venue' );
		Suggestions suggestions <- parameter.ParameterValue.Suggestions;
		CustomData cdata <- getCustomData();

		if(suggestions.BOBusinessStatus == 'OK')
		{
			Venue venue;
			BatchRecoverPosition(suggestions.RecommendedVenues, 1, venue);

			GenerateMainAnswer('msg-nextvenue-beginning');
			GenerateRecommendedVenue(venue);
			GenerateMainAnswer('msg-nextvenue-middle');
			GenerateDistance(venue);
			GenerateMainAnswer('msg-nextvenue-end');

			BatchInsertEnd(cdata.HackTourProfiling.ShownVenues, venue);
			$MINDBOARD@CustomData.HackTourProfiling.ShownVenues <- cdata.HackTourProfiling.ShownVenues;
    	}
    	else if(suggestions.BOBusinessStatus == 'EMPTY')
        {
        	// TODO
        }
  	}
)

(ScriboScheme GenerateSuggestions: [ DialogueAct ]
	ScriboCapture 
	{
		&IsExplicit('parameter') && hasParType (&LOCPars(1), 'suggestions' )
	}
	ScriboAction 
	{
		Parameter parameter <- getParByType ( &LOCPars(1), 'suggestions' );
		Suggestions suggestions <- parameter.ParameterValue.Suggestions;
		CustomData cdata <- getCustomData();

		if(suggestions.BOBusinessStatus == 'OK')
		{
			RecommendedVenues selected;
			bool first <- True;
			for(int i <- 1; i <= BatchSize(suggestions.RecommendedVenues); i++)
			{
				Venue venue;
				BatchRecoverPosition(suggestions.RecommendedVenues, i, venue);

				if(notShownVenue(venue))
				{
					 BatchInsertEnd(selected, venue);
				}
				else
				{
					first <- False;
				}
			}

			if(BatchSize(selected) > 0)
			{
				Parameter param1 <- getParameterCurrentScript('venuecategory');

				bool subtypes <- param1.ParameterValue.VenueCategory.VenueAvailableSubcategories;

				GenerateMainAnswer('msg-recommender-beginning');

				Venue venue;
				BatchRecoverPosition(selected, 1, venue);
				GenerateRecommendedVenue(venue);
				BatchInsertEnd(cdata.HackTourProfiling.ShownVenues, venue);
				$MINDBOARD@CustomData.HackTourProfiling.ShownVenues <- cdata.HackTourProfiling.ShownVenues;

				if(BatchSize(selected) > 1)
				{
					SetMainAnswer(' ');
					GenerateMainAnswer('msg-hacktour-and');
					BatchRecoverPosition(selected, 2, venue);
                    GenerateRecommendedVenue(venue);
                    BatchInsertEnd(cdata.HackTourProfiling.ShownVenues, venue);
       				$MINDBOARD@CustomData.HackTourProfiling.ShownVenues <- cdata.HackTourProfiling.ShownVenues;
				}
				SetMainAnswer('. ');
				if(subtypes && first)
				{
					VenueCategoryId category <- param1.ParameterValue.VenueCategory.VenueCategoryId;
					GenerateMainAnswer(LiteralConcat('msg-recommender-desambiguator-', category));
				}						
			}
			else
			{
				GenerateMainAnswer('msg-recommender-all-shown');
			}
    	}
    	else if(suggestions.BOBusinessStatus == 'EMPTY')
        {
        	// TODO
        }
  	}
)

(ScriboScheme GenerateVenue: [ DialogueAct ]
	ScriboCapture
	{
		&IsExplicit('parameter') && hasParType (&LOCPars(1), 'venue' )
	}
	ScriboAction
	{
		Parameter parameter <- getParByType ( &LOCPars(1), 'venue' );
		Venue venue <- parameter.ParameterValue.Venue;
		CustomData cdata <- getCustomData();

		string description <- venue.VenueDescription;

		if(Filled(description))
		{
			cdata.HackTourProfiling.NoDetails <- False;

			SetMainAnswer(description);
		}
		else
		{
			cdata.HackTourProfiling.NoDetails <- True;
            setCustomData(cdata);

			Tips tips <- venue.VenueTips.Tips;
			if(Filled(tips))
			{
				Tip tip;
				BatchRecoverPosition(tips, 1, tip);
				GenerateMainAnswer('msg-venues-tip-introduction');
				SetMainAnswer(tip.TipText);
			}
			else
			{
				setCustomData(cdata);

				GenerateMainAnswer('msg-venues-details-error');
			}
		}
   	}
)

(ScriboScheme GenerateTimetable: [ DialogueAct ]
	ScriboCapture
	{
		#OBJLOCUTIO-1.CoreDialogueAct.Dimension == 'statement' &&
        #OBJLOCUTIO-1.CoreDialogueAct.Function == 'inform' &&
       	containsActionDomainRoot( #OBJLOCUTIO-1.TaskDialogueAct.Action, 'explicit') &&
  		#OBJLOCUTIO-1.TaskDialogueAct.Scope == 'timetable'
	}
	ScriboAction
	{
		CustomData cdata <- getCustomData();
		Venue venue <- cdata.HackTourProfiling.CurrentVenue;

		SetMainAnswer(Capitalize(venue.VenueName));
		SetMainAnswer(" ");

		GenerateMainAnswer('msg-venues-timetables');

		OpeningHoursList openinghours <- venue.OpeningHoursList;

		if(Devoid(openinghours))
		{
			openinghours <- getDefaultOpeningHoursList();
		}

		for(int i <- 1; i <= BatchSize(openinghours); i++)
		{
			OpeningHours hours;
			BatchRecoverPosition(openinghours, i, hours);

			GenerateHours(hours);

			if(i < BatchSize(openinghours) - 1)
            {
               	SetMainAnswer(', ');
            }
            else if(i < BatchSize(openinghours))
            {
              	SetMainAnswer(' ');
                GenerateMainAnswer('msg-hacktour-and');
            }
            else
            {
            	SetMainAnswer('. ');
            }
		}

		if(venue.VenueOutdoorFlag == True)
		{
			Parameter paramDt <- getParameterCurrentScript('datetime');
			Parameter paramCp <- getParameterCurrentScript('countryplace');
			Parameters parameters;
			BatchInsertEnd(parameters, paramDt);
			BatchInsertEnd(parameters, paramCp);
			Parameter paramFc <- getForecast(parameters);
			ForecastList list <- paramFc.ParameterValue.Forecast.ForecastList;

			bool rain <- False;
			for(int i <- 1; i <= BatchSize(list); i++)
			{
				ForecastElement el;
				BatchRecoverPosition(list, i, el);
				int descriptor <- getForecastDescriptorCategory(el.ForecastDescriptorId);
				if(descriptor == 5)
				{
					rain <- True;
				}
			}
			if(rain)
			{
				GenerateMainAnswer('msg-forecast-rain-warning');
			}
			else
			{	
				GenerateMainAnswer('msg-forecast-rain-nowarning');
			}
		}
   	}
)

(ScriboScheme GenerateTips: [ DialogueAct ]
	ScriboCapture
	{
		#OBJLOCUTIO-1.CoreDialogueAct.Dimension == 'statement' &&
		#OBJLOCUTIO-1.CoreDialogueAct.Function == 'inform' &&
		containsActionDomainRoot( #OBJLOCUTIO-1.TaskDialogueAct.Action, 'explicit') &&
		#OBJLOCUTIO-1.TaskDialogueAct.Scope == 'tips'
	}
	ScriboAction
	{
		CustomData cdata <- getCustomData();
   		Venue venue <- cdata.HackTourProfiling.CurrentVenue;
		Tips tips <- venue.VenueTips.Tips;

		if(Filled(tips))
		{
			Tip tip;
			BatchRecoverPosition(tips, 1, tip);
			SetMainAnswer(" ");
			GenerateMainAnswer('msg-venues-tip-introduction');
			SetMainAnswer(tip.TipText);
		}
   	}
)
