// ****************************************************************************
//
//	Functions for generating suggestions
//
// ****************************************************************************
//
//	PROJECT	: HackTour
// 	DOMAIN  : -
//	MODULE  : Functions
//	PACKAGE	: -
// 	FOLDER  : -
// 	FILE	: HackTourSuggestionFunctions.lkt
//
// ****************************************************************************

procedure setDefaultCategoryVenue()
{
	Parameter p;
	p.ParameterValue.VenueCategory <- ( VenueCategoryId : '4deefb944765f83613cdba6e', VenueCategoryName : 'Historic Site', VenueAvailableSubcategories: True );
	p.ParameterCategory <- 'terminal';
	p.ParameterType <- 'venuecategory';

   	setParameterCurrentScript('venuecategory', p);
	setInfoState('6', 'grounded');
}

bool changedCountryPlace()
{
	DialogueScript script <- getCurrentScript();

	int argumentNumber <- LookForInfoItemParameterType( script, 'countryplace' );
	ScriptInfoItem scriptInfoItem;
	BatchRecoverPosition( script.ScriptInfoItems, argumentNumber, scriptInfoItem );

	return scriptInfoItem.InfoItemState == 'captured';	
}

bool notShownVenue(Venue venue)
{
	bool ret <- True;

	CustomData cdata <- getCustomData();
	ShownVenues shown <- cdata.HackTourProfiling.ShownVenues;
	for(int i <- 1; i <= BatchSize(shown); i++)
	{
		Venue recovered;
		BatchRecoverPosition(shown ,i , recovered);

		if(recovered.VenueId == venue.VenueId)
		{
			ret <- False;
		}
	}

	return ret;
}

procedure GenerateDistance(Venue venue)
{
	if(Random(1,2) == 1)
	{
		int value <- ShapeToInt(venue.VenueDistance.VenueDistanceValue);
		SetMainAnswer(value);
		SetMainAnswer(" ");
		GenerateMainAnswer('msg-nextvenue-meters');
	}
	else
	{
		int value <- ShapeToInt(venue.VenueDuration.VenueDurationValue);
    	SetMainAnswer(value);
    	SetMainAnswer(" ");
    	GenerateMainAnswer('msg-nextvenue-minutes');
	}
}

procedure GenerateRecommendedVenue(Venue venue)
{
	SetMainAnswer(trim(venue.VenueName));
}

procedure GenerateHours(OpeningHours hours)
{
	// 1: Monday - 7: Sunday
	OpeningDays opdas <- hours.OpeningDays;
	if(consecutiveDays(opdas) && BatchSize(opdas) > 2)
	{
		OpeningDay opda1, opda2;
		BatchRecoverPosition(opdas, 1, opda1);
		BatchRecoverPosition(opdas, BatchSize(opdas), opda2);

   		GenerateMainAnswer('msg-dow-from');
		SetMainAnswer(dayInWeekName(opda1));
		SetMainAnswer(" ");	
   		GenerateMainAnswer('msg-dow-to');
		SetMainAnswer(dayInWeekName(opda2));			
		SetMainAnswer(" ");
	}
	else
	{
		for(int i <- 1; i <= BatchSize(opdas); i++)
		{	
			OpeningDay opda;
			BatchRecoverPosition(opdas, i, opda);

			SetMainAnswer(dayInWeekName(opda));
			if(i < BatchSize(opdas) - 1)
			{
				SetMainAnswer(", ");
			}
			else if(i < BatchSize(opdas))
        	{
        		SetMainAnswer(" ");
        		GenerateMainAnswer('msg-hacktour-and');
        	}
        	else
        	{
        		SetMainAnswer(" ");
        	}
		}
	}

	OpeningFrames opfrs <- hours.OpeningFrames;
	for(int i <- 1; i <= BatchSize(opfrs); i++)
    {
		OpeningFrame opfr;
		BatchRecoverPosition(opfrs, i, opfr);

		GenerateOpeningFrame(opfr);
		if(i < BatchSize(opfrs) - 1)
		{
			SetMainAnswer(", ");
		}
		else if(i < BatchSize(opfrs))
		{
			SetMainAnswer(" ");
			GenerateMainAnswer('msg-hacktour-and');
		}
	}
}

bool consecutiveDays(OpeningDays opdas)
{
	bool ret <- True;

	OpeningDay currentOpda;
	BatchRecoverPosition(opdas, 1, currentOpda);

	for(int i <- 2; i <= BatchSize(opdas); i++)
	{
		OpeningDay opda;
		BatchRecoverPosition(opdas, i, opda);

		if(currentOpda + 1 != opda)
		{
			ret <- False;
		}
		currentOpda <- opda;
	}

	return ret;
}

procedure GenerateOpeningFrame(OpeningFrame opfr)
{
	GenerateMainAnswer('msg-hours-from');
	OpeningStart os <- opfr.OpeningStart;
	SetMainAnswer(GenerateHour(SubLiteral(os, 1, 2)));
	SetMainAnswer(" ");
	GenerateMainAnswer('msg-hours-to');
	OpeningEnd oe <- opfr.OpeningEnd;
	SetMainAnswer(GenerateHour(SubLiteral(oe, 1, 2)));
}

string GenerateHour(string hh)
{
	int h <- ShapeToInt(hh);
	string ret <- ShapeToLiteral(h);

	if(h < 12)
	{
		ret <- LiteralConcat(ret, ' ', getPropLang('msg-morning-hour'));
	}
	else if(h > 12)
	{
		h <- h - 12;
		ret <- ShapeToLiteral(h);
		ret <- LiteralConcat(ret, ' ', getPropLang('msg-afternoon-hour'));
	}

	return ret;
}

